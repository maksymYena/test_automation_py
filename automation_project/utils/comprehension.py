# –ó–∞–¥–∞–Ω–∏–µ 1 ‚Äî List comprehension
# –°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ –∏–∑ –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≤—Å–µ—Ö —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 20 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ:
from typing import List

even_squares = [value for value in range(0, 20) if value % 2 == 0]
print(even_squares)

# üî∏ –ó–∞–¥–∞–Ω–∏–µ 2 ‚Äî Dict comprehension
# –°–¥–µ–ª–∞–π —Å–ª–æ–≤–∞—Ä—å {"user_1": 1, "user_2": 2, ..., "user_5": 5}:

users = {f"user_{user}": user for user in range(1, 6)}
print(users)

# üî∏ –ó–∞–¥–∞–Ω–∏–µ 3 ‚Äî zip –≤ —Ç–µ—Å—Ç–µ
# –û–±—ä–µ–¥–∏–Ω–∏ —Å–ø–∏—Å–∫–∏ –∏–º—ë–Ω –∏ —Ä–æ–ª–µ–π –≤ –ø–∞—Ä—ã:

names = ["Alice", "Bob"]
roles = ["admin", "user"]

paired = [(name, role) for name, role in zip(names, roles)]
print(paired)


# üî∏ –ó–∞–¥–∞–Ω–∏–µ 4 ‚Äî –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä
# –ù–∞–ø–∏—à–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫–∏ "test_0", "test_1" ... "test_4":

def count_up_to(n: int):
    for i in range(0, n):
        yield f"test_{i}"


# –ó–∞–¥–∞–Ω–∏–µ 5 ‚Äî enumerate –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏

steps = ["Open page", "Login", "Click submit"]

for id, step in enumerate(steps, start=1):
    print(id, step)


# –ó–∞–¥–∞–Ω–∏–µ:
# –°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π:
# –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω (["Maksym", "Tanya"])
# –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞: "Hello, Maksym!", "Hello, Tanya!"

def greeting_via_generator(names: List[str]):
    for name in names:
        yield f"Hello, {name}"


names = (["Maksym", "Tanya"])

for message in greeting_via_generator(names):
    print(message)

steps = ["Open login page", "Enter credentials", "Click login", "Verify dashboard"]

for id, item in enumerate(steps, start=1):
    print(f"Step {id}:", item)


def step_logger(steps: List[str]):
    for id, step in enumerate(steps, start=1):
        yield f"Step {id}: {step}"


for line in step_logger(steps):
    print(line)
